
CATEGORIES
expression, definition,statement, type 
NODES
program -> definitions:definition*;

varDefinition -> type name:string;
functionDefinition-> name:string parameters:variable* returnType:type localDefs:->varDefinition*  statements:statement*
structDefinition->name:string fields:variable*;
variable: name:string type;

intType:type -> ;
realType:type -> ;
charType:type -> ;
arrayType:type-> dimensions:int* type;
structType:type-> name:string;

print:statement -> expression variant:string;
read:statement-> expression;
if:statement-> condition:expression body:statement*  else:statement*
while:statement->condition:expression body:statement*
assignment:statement -> left:expression right:expression;
invocation:statement-> name:string parameters:variable*;
return:statement-> expression;

arithmeticExpression:expression -> left:expression operator:string right:expression;
comparison:expression-> left:expression operator:string right:expression;
and:expression-> left:expression  right:expression;
or:expression-> left:expression  right:expression;
not:expression-> left:expression  right:expression;
cast:expression-> type expression;
arrayAccess:expression-> name:string  position:expression*;
structFieldAccess:expression-> field:expression 
invocation:expression-> name:string parameters:variable*;
variable:expression -> name:string;
intConstant:expression -> value:string;
realConstant:expression -> value:string;
charConstant:expression -> value:string;
